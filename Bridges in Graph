void Bridges(int u, vector<int>& disc,vector<int>& low,vector<int>& parent, unordered_map<int,vector<int>>& adj,vector<vector<int>>& res) {
    static int time = 0;
    disc[u] = low[u] = time;
    time+=1;
    
    for (int v:adj[u]) {
        if (disc[v] == -1) {
            parent[v] = u;
            Bridges(v,disc,low,parent,adj,res);
            low[u] =  min(low[u],low[v]);
            
            if (low[v] > disc[u])
            {
                vector<int> temp;
                temp.push_back(u);
                temp.push_back(v);
                res.push_back(temp);                    
            }                
        }
        else if (v != parent[u]) 
            low[u] = min(low[u],disc[v]);
    }
}
    
vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<vector<int>> res;
        if (connections.size() == 1) {
            res.push_back(connections[0]);
            return res;
        }
      
        unordered_map<int,vector<int>> adj;
        for (auto i: connections) {
            adj[i[0]].push_back(i[1]);
            adj[i[1]].push_back(i[0]);
        }
        
        vector<int> disc(n,-1);
        vector<int> low(n,-1);
        vector<int> parent(n,-1);
        
        for (int i=0; i<n; i++) {
            if (disc[i] == -1)
                Bridges(i,disc,low,parent,adj,res);            
        }               
        
        return res;
        
    }
};

class Trie {
public:
    Trie* letters[26];
    bool isEnd;
    
    Trie() {
        isEnd = false;
        for (int i=0; i<26; i++) {
            letters[i] = nullptr;
        }
    }
    
    void insert(string word) {
        Trie* curr = this;
        for (int i=0; i<word.length(); i++) {
            char ch = word[i];
            if (curr->letters[ch-'a'] == nullptr) {
                curr->letters[ch-'a'] = new Trie();
            }
            curr = curr->letters[ch-'a'];
        }
        curr->isEnd = true;        
    }
    
    bool search(string word) {
        Trie* curr = this;
        for (int i=0; i<word.length(); i++) {
            char ch = word[i];
            if (curr->letters[ch-'a'] == nullptr) return false;
            curr = curr->letters[ch-'a'];
        }        
        if (curr->isEnd) return true;  
        return false;
    }
    
    bool startsWith(string prefix) {
        Trie* curr = this;
        for (int i=0; i<prefix.length(); i++) {
            char ch = prefix[i];
            if (curr->letters[ch-'a'] == nullptr) return false;
            curr = curr->letters[ch-'a'];
        }
        return true; }
};
